// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Profile component sets new player name 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Profile
    avatar="./images/default.png"
    changed={false}
    name="Lester"
    setAvatar={[MockFunction]}
    setName={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <FormGroup
          tag="div"
        >
          <Label
            for="playerName"
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            Player name
          </Label>
          <Input
            id="playerName"
            name="playerName"
            onChange={[Function]}
            type="text"
            value="Lester"
          />
        </FormGroup>,
        <FormGroup
          tag="div"
        >
          <Label
            for="avatar"
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            Avatar
          </Label>
          <br />
          <img
            alt="default avatar"
            className="avatar selected"
            id="defaultAvatar"
            onClick={[Function]}
            src="./images/default.png"
          />
          <img
            alt="male avatar"
            className="avatar "
            id="maleAvatar"
            onClick={[Function]}
            src="./images/male.png"
          />
          <img
            alt="female avatar"
            className="avatar "
            id="femaleAvatar"
            onClick={[Function]}
            src="./images/female.png"
          />
        </FormGroup>,
        <Button
          color="secondary"
          disabled={true}
          onClick={[Function]}
          tag="button"
        >
          Change
        </Button>,
      ],
      "className": "Profile_main",
      "tag": "form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Label
              for="playerName"
              tag="label"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              Player name
            </Label>,
            <Input
              id="playerName"
              name="playerName"
              onChange={[Function]}
              type="text"
              value="Lester"
            />,
          ],
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Player name",
              "for": "playerName",
              "tag": "label",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": "Player name",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "playerName",
              "name": "playerName",
              "onChange": [Function],
              "type": "text",
              "value": "Lester",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Label
              for="avatar"
              tag="label"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              Avatar
            </Label>,
            <br />,
            <img
              alt="default avatar"
              className="avatar selected"
              id="defaultAvatar"
              onClick={[Function]}
              src="./images/default.png"
            />,
            <img
              alt="male avatar"
              className="avatar "
              id="maleAvatar"
              onClick={[Function]}
              src="./images/male.png"
            />,
            <img
              alt="female avatar"
              className="avatar "
              id="femaleAvatar"
              onClick={[Function]}
              src="./images/female.png"
            />,
          ],
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Avatar",
              "for": "avatar",
              "tag": "label",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": "Avatar",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "default avatar",
              "className": "avatar selected",
              "id": "defaultAvatar",
              "onClick": [Function],
              "src": "./images/default.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "male avatar",
              "className": "avatar ",
              "id": "maleAvatar",
              "onClick": [Function],
              "src": "./images/male.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "female avatar",
              "className": "avatar ",
              "id": "femaleAvatar",
              "onClick": [Function],
              "src": "./images/female.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Change",
          "color": "secondary",
          "disabled": true,
          "onClick": [Function],
          "tag": "button",
        },
        "ref": null,
        "rendered": "Change",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <FormGroup
            tag="div"
          >
            <Label
              for="playerName"
              tag="label"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              Player name
            </Label>
            <Input
              id="playerName"
              name="playerName"
              onChange={[Function]}
              type="text"
              value="Lester"
            />
          </FormGroup>,
          <FormGroup
            tag="div"
          >
            <Label
              for="avatar"
              tag="label"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              Avatar
            </Label>
            <br />
            <img
              alt="default avatar"
              className="avatar selected"
              id="defaultAvatar"
              onClick={[Function]}
              src="./images/default.png"
            />
            <img
              alt="male avatar"
              className="avatar "
              id="maleAvatar"
              onClick={[Function]}
              src="./images/male.png"
            />
            <img
              alt="female avatar"
              className="avatar "
              id="femaleAvatar"
              onClick={[Function]}
              src="./images/female.png"
            />
          </FormGroup>,
          <Button
            color="secondary"
            disabled={true}
            onClick={[Function]}
            tag="button"
          >
            Change
          </Button>,
        ],
        "className": "Profile_main",
        "tag": "form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Label
                for="playerName"
                tag="label"
                widths={
                  Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ]
                }
              >
                Player name
              </Label>,
              <Input
                id="playerName"
                name="playerName"
                onChange={[Function]}
                type="text"
                value="Lester"
              />,
            ],
            "tag": "div",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Player name",
                "for": "playerName",
                "tag": "label",
                "widths": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
              },
              "ref": null,
              "rendered": "Player name",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "playerName",
                "name": "playerName",
                "onChange": [Function],
                "type": "text",
                "value": "Lester",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Label
                for="avatar"
                tag="label"
                widths={
                  Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ]
                }
              >
                Avatar
              </Label>,
              <br />,
              <img
                alt="default avatar"
                className="avatar selected"
                id="defaultAvatar"
                onClick={[Function]}
                src="./images/default.png"
              />,
              <img
                alt="male avatar"
                className="avatar "
                id="maleAvatar"
                onClick={[Function]}
                src="./images/male.png"
              />,
              <img
                alt="female avatar"
                className="avatar "
                id="femaleAvatar"
                onClick={[Function]}
                src="./images/female.png"
              />,
            ],
            "tag": "div",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Avatar",
                "for": "avatar",
                "tag": "label",
                "widths": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
              },
              "ref": null,
              "rendered": "Avatar",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "default avatar",
                "className": "avatar selected",
                "id": "defaultAvatar",
                "onClick": [Function],
                "src": "./images/default.png",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "male avatar",
                "className": "avatar ",
                "id": "maleAvatar",
                "onClick": [Function],
                "src": "./images/male.png",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "female avatar",
                "className": "avatar ",
                "id": "femaleAvatar",
                "onClick": [Function],
                "src": "./images/female.png",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Change",
            "color": "secondary",
            "disabled": true,
            "onClick": [Function],
            "tag": "button",
          },
          "ref": null,
          "rendered": "Change",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
